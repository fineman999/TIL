spring:
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  application:
    name: product-service
  datasource:
    main:
      url: ${MYSQL_URL:jdbc:mysql://localhost:3306/store?useSSL=false&serverTimezone=UTC&useUnicode=true&character_set_server=utf8mb4=utf8mb4&8useSSL=false&allowPublicKeyRetrieval=true}
      username: ${MYSQL_USERNAME:root}
      password: ${MYSQL_PASSWORD:my-secret-pw}
      driver-class-name: com.mysql.cj.jdbc.Driver
    lock:
      url: ${MYSQL_URL:jdbc:mysql://localhost:3306/store?useSSL=false&serverTimezone=UTC&useUnicode=true&character_set_server=utf8mb4=utf8mb4&8useSSL=false&allowPublicKeyRetrieval=true}
      username: ${MYSQL_USERNAME:root}
      password: ${MYSQL_PASSWORD:my-secret-pw}
      driver-class-name: com.mysql.cj.jdbc.Driver
      hikari:
        maximum-pool-size: 40
        max-lifetime: 60000
        connection-timeout: 5000 # 5초
        pool-name: HikariCPLock  # HikariCP의 pool 이름
  data:
    redis:
      host: ${REDIS.HOST:localhost}
      port: 6379
      password: ${REDIS.PASSWORD:mypassword}
      repositories:
        enabled: false
logging:
  level:
    org:
      hibernate:
        SQL: DEBUG
        type:
          descriptor:
            sql:
              BasicBinder: TRACE

resilience4j.retry:
  configs:
    default:
      maxAttempts: 1000 # 최대 1000번까지 재시도
      waitDuration: 10 # 10ms
      retry-exceptions: # 재시도할 예외 만약 지정하지 않으면 모든 예외를 재시도
        - jakarta.persistence.OptimisticLockException
        - org.springframework.orm.ObjectOptimisticLockingFailureException
        - org.hibernate.StaleObjectStateException
  instances:
    optimisticLockRetryConfig: # 인스턴스 이름
      baseConfig: default # resilience4j.retry.configs.default를 사용