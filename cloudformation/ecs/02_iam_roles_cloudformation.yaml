
# 1. Stack 생성
# aws cloudformation create-stack \
#   --stack-name stack-weplat2-ap2-iam-role \
#   --template-body file://ecs/02_iam_roles_cloudformation.yaml \
#   --capabilities CAPABILITY_NAMED_IAM
# 2. Stack 업데이트
# aws cloudformation update-stack \
# --stack-name stack-weplat2-ap2-iam-role \
# --template-body file://ecs/02_iam_roles_cloudformation.yaml \
# --capabilities CAPABILITY_NAMED_IAM
AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template for ECS IAM Roles

Resources:
  AppWebExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "AppWebExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
  AppWebTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "AppWebTaskRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "AppWebTaskPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
  AppWasTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "AppWasTaskRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "AppWasTaskPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "sagemaker:InvokeEndpoint"
                Resource: "*"
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "ECSServiceRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ecs.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"
  ECSAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "ECSAutoScalingRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "application-autoscaling.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole"
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"
  ECRGithubActionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ecr-github-actions-v2
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: arn:aws:iam::183295419955:oidc-provider/token.actions.githubusercontent.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                token.actions.githubusercontent.com:aud: sts.amazonaws.com
              StringLike:
                token.actions.githubusercontent.com:sub: repo:fineman999/*
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
      Policies:
        - PolicyName: "ECRRegisterTaskDefinitionPolicy"
          PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - ecs:RegisterTaskDefinition
                  Resource: "arn:aws:ecs:ap-northeast-2:183295419955:task-definition/*"
                - Effect: Allow
                  Action:
                    - iam:PassRole #  ECS에서 특정 역할을 태스크에 전달할 수 있도록 허용
                  Resource:
                    - !GetAtt AppWebExecutionRole.Arn
                    - !GetAtt AppWebTaskRole.Arn
                - Effect: Allow
                  Action:
                    - ecs:DescribeServices
                    - ecs:UpdateService
                    - ecs:DescribeTaskDefinition
                  Resource: "arn:aws:ecs:ap-northeast-2:183295419955:service/*" # ECS 서비스에 대한 설명을 가져올 수 있도록 허용
Outputs:
  AppWebExecutionRoleArn:
    Value: !GetAtt AppWebExecutionRole.Arn
    Description: ARN of the ECS Execution Role
    Export:
      Name: AppWebExecutionRoleArn

  AppWebTaskRoleArn:
    Value: !GetAtt AppWebTaskRole.Arn
    Description: ARN of the ECS Task Role
    Export:
      Name: AppWebTaskRoleArn

  ECSServiceRoleArn:
    Value: !GetAtt ECSServiceRole.Arn
    Description: ARN of the ECS Service Role
    Export:
      Name: ECSServiceRoleArn

  ECSAutoScalingRoleArn:
    Value: !GetAtt ECSAutoScalingRole.Arn
    Description: ARN of the ECS Auto Scaling Role
    Export:
      Name: ECSAutoScalingRoleArn

  AppWasTaskRoleArn:
    Value: !GetAtt AppWasTaskRole.Arn
    Description: ARN of the ECS Task Role
    Export:
      Name: AppWasTaskRoleArn